@page "/empleados/agregar"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Nomina.Shared.Models
@using System.Net.Http.Json
@using Newtonsoft.Json.Linq

<h3>Agregar Empleado</h3>

<EditForm Model="@empleado" OnValidSubmit="GuardarEmpleado">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label class="form-label">Nombre:</label>
        <InputText class="form-control" @bind-Value="empleado.Nombre" />
        <ValidationMessage For="@(() => empleado.Nombre)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha de Nacimiento:</label>
        <InputDate class="form-control" @bind-Value="empleado.FechaNacimiento" />
        <ValidationMessage For="@(() => empleado.FechaNacimiento)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Dirección:</label>
        <InputText class="form-control" @bind-Value="empleado.Direccion" />
        <ValidationMessage For="@(() => empleado.Direccion)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Teléfono:</label>
        <InputText class="form-control" @bind-Value="empleado.Telefono" />
        <ValidationMessage For="@(() => empleado.Telefono)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email:</label>
        <InputText class="form-control" @bind-Value="empleado.Email" />
        <ValidationMessage For="@(() => empleado.Email)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Salario:</label>
        <InputNumber class="form-control" @bind-Value="empleado.Salario" />
        <ValidationMessage For="@(() => empleado.Salario)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Cargo:</label>
        <InputText class="form-control" @bind-Value="empleado.Cargo" />
        <ValidationMessage For="@(() => empleado.Cargo)" class="text-danger" />
    </div>

    <div class="mb-3">
        <label class="form-label">Departamento:</label>
        <InputText class="form-control" @bind-Value="empleado.Departamento" />
        <ValidationMessage For="@(() => empleado.Departamento)" class="text-danger" />
    </div>

    <div class="form-check mb-3">
        <InputCheckbox class="form-check-input" @bind-Value="empleado.Activo" />
        <label class="form-check-label">Activo</label>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span> Guardando...</span>
            }
            else
            {
                <span>Guardar</span>
            }
        </button>

        <button type="button" class="btn btn-secondary" @onclick="LimpiarFormulario" disabled="@isSaving">
            Limpiar
        </button>
    </div>
</EditForm>

@if (mensaje != null)
{
    <div class="alert @alertClass mt-3">@mensaje</div>
}

@code {
    private Empleado empleado = new();
    private string? mensaje;
    private string alertClass = "alert-info";
    private bool isSaving = false;

    private void LimpiarFormulario()
    {
        empleado = new Empleado();
        mensaje = null;
    }

    private async Task GuardarEmpleado()
    {
        isSaving = true;
        mensaje = null;
        alertClass = "alert-info";

        try
        {
            var response = await Http.PostAsJsonAsync("api/Empleados", empleado);

            if (response.IsSuccessStatusCode)
            {
                mensaje = "¡Empleado creado exitosamente!";
                alertClass = "alert-success";
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/empleados");
            }
            else
            {
                await ProcesarErrorResponse(response);
            }
        }
        catch (HttpRequestException httpEx)
        {
            mensaje = $"Error de conexión: {httpEx.Message}";
            alertClass = "alert-danger";
        }
        catch (Exception ex)
        {
            mensaje = $"Error inesperado: {ex.Message}";
            alertClass = "alert-danger";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ProcesarErrorResponse(HttpResponseMessage response)
    {
        try
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();

            mensaje = errorResponse switch
            {
                null => "Error: Respuesta inválida del servidor",
                _ when errorResponse.ContainsKey("Errors") => $"Errores: {string.Join(", ", (JArray)errorResponse["Errors"])}",
                _ when errorResponse.ContainsKey("Message") => errorResponse["Message"]?.ToString() ?? "Error sin mensaje",
                _ => response.StatusCode == System.Net.HttpStatusCode.BadRequest
                    ? "Error en la solicitud"
                    : $"Error: {response.StatusCode}"
            };
        }
        catch
        {
            mensaje = $"Error al procesar la respuesta: {response.StatusCode}";
        }

        alertClass = "alert-danger";
    }
}