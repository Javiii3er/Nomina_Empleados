@page "/empleados/editar/{Id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Nomina.Shared.Models
@using System.Net.Http.Json

<div class="container mt-4">
    <h3 class="text-primary mb-4">Editar Empleado</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    <EditForm Model="@empleado" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Sección 1: Información Personal -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5>Información Personal</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Nombre:</label>
                        <InputText class="form-control" @bind-Value="empleado.Nombre" />
                        <ValidationMessage For="@(() => empleado.Nombre)" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Fecha de Nacimiento:</label>
                        <InputDate class="form-control" @bind-Value="empleado.FechaNacimiento" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección 2: Contacto -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5>Información de Contacto</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Teléfono:</label>
                        <InputText class="form-control" @bind-Value="empleado.Telefono" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Email:</label>
                        <InputText class="form-control" @bind-Value="empleado.Email" />
                        <ValidationMessage For="@(() => empleado.Email)" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Dirección:</label>
                        <InputText class="form-control" @bind-Value="empleado.Direccion" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Sección 3: Información Laboral -->
        <div class="card mb-4">
            <div class="card-header bg-light">
                <h5>Información Laboral</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Departamento:</label>
                        <InputText class="form-control" @bind-Value="empleado.Departamento" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Salario:</label>
                        <InputNumber class="form-control" @bind-Value="empleado.Salario" />
                        <ValidationMessage For="@(() => empleado.Salario)" />
                    </div>
                    <div class="col-md-4 mb-3">
                        <label class="form-label">Estado:</label>
                        <InputSelect class="form-select" @bind-Value="empleado.Activo">
                            <option value="true">Activo</option>
                            <option value="false">Inactivo</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
        </div>

        <!-- Botones -->
        <div class="d-flex gap-2 mt-4">
            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="d-flex align-items-center gap-2">
                        <span class="spinner-border spinner-border-sm"></span>
                        Guardando...
                    </span>
                }
                else
                {
                    <span>Guardar</span>
                }
            </button>

            <button type="button" class="btn btn-secondary" @onclick="VolverALista">
                Cancelar
            </button>
            <button type="button" class="btn btn-danger ms-auto" @onclick="MostrarConfirmacionEliminar">
                Eliminar
            </button>
        </div>
    </EditForm>

    <!-- Modal Confirmación Eliminar -->
    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmar Eliminación</h5>
                    </div>
                    <div class="modal-body">
                        ¿Estás seguro de eliminar a @empleado.Nombre?
                    </div>
                    <div class="modal-footer">
                        <button @onclick="EliminarEmpleado" class="btn btn-danger">Sí, Eliminar</button>
                        <button @onclick="OcultarConfirmacionEliminar" class="btn btn-secondary">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Historial -->
    <div class="card mt-4">
        <div class="card-header">
            Historial de Cambios
        </div>
        <div class="card-body">
            <pre class="mb-0">@empleado.HistorialCambios</pre>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private Empleado empleado = new();
    private bool isSaving = false;
    private bool showDeleteConfirmation = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empleado = await Http.GetFromJsonAsync<Empleado>($"api/Empleados/{Id}") ?? new();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar empleado: {ex.Message}";
        }
    }

    private async Task GuardarCambios()
    {
        isSaving = true;
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Empleados/{Id}", empleado);
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = await response.Content.ReadAsStringAsync();
                return;
            }
            NavigationManager.NavigateTo("/empleados");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void VolverALista() => NavigationManager.NavigateTo("/empleados");

    private void MostrarConfirmacionEliminar() => showDeleteConfirmation = true;

    private void OcultarConfirmacionEliminar() => showDeleteConfirmation = false;

    private async Task EliminarEmpleado()
    {
        isSaving = true;
        try
        {
            await Http.DeleteAsync($"api/Empleados/{Id}");
            NavigationManager.NavigateTo("/empleados");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }
}