@page "/empleados"
@using Nomina.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3 class="text-primary mb-4">Lista de Empleados</h3>

    <!-- Filtros -->
    <div class="row mb-3">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="Buscar por nombre..." 
                   @bind="searchText" @bind:event="oninput" />
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="selectedDepartment">
                <option value="">Todos los departamentos</option>
                @foreach (var dept in departments)
                {
                    <option value="@dept">@dept</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="statusFilter">
                <option value="all">Todos los estados</option>
                <option value="active">Solo activos</option>
                <option value="inactive">Solo inactivos</option>
            </select>
        </div>
    </div>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }
    else if (filteredEmployees == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3 text-muted">Cargando datos de empleados...</p>
        </div>
    }
    else if (filteredEmployees.Count == 0)
    {
        <div class="alert alert-info">
            No se encontraron empleados con los filtros aplicados.
            <a href="empleados/agregar" class="alert-link">¿Agregar nuevo?</a>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="table-dark">
                    <tr>
                        <th scope="col" @onclick="@(() => SortBy("Id"))">ID @SortIcon("Id")</th>
                        <th scope="col" @onclick="@(() => SortBy("Nombre"))">Nombre @SortIcon("Nombre")</th>
                        <th scope="col" @onclick="@(() => SortBy("Cargo"))">Cargo @SortIcon("Cargo")</th>
                        <th scope="col" @onclick="@(() => SortBy("Departamento"))">Departamento @SortIcon("Departamento")</th>
                        <th scope="col" class="text-end" @onclick="@(() => SortBy("Salario"))">Salario @SortIcon("Salario")</th>
                        <th scope="col" @onclick="@(() => SortBy("Activo"))">Estado @SortIcon("Activo")</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var emp in paginatedEmployees ?? new List<Empleado>())
                    {
                        <tr>
                            <td>@emp.Id</td>
                            <td>@emp.Nombre</td>
                            <td>@emp.Cargo</td>
                            <td>@(emp.Departamento ?? "Sin departamento")</td>
                            <td class="text-end">@emp.Salario.ToString("C2")</td>
                            <td>
                                <span class="badge @(emp.Activo ? "bg-success" : "bg-warning text-dark")">
                                    @(emp.Activo ? "Activo" : "Inactivo")
                                </span>
                            </td>
                            <td>
                                <a href="@($"empleados/editar/{emp.Id}")" class="btn btn-sm btn-primary">Editar</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Paginación -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="PreviousPage">Anterior</button>
                </li>
                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                    </li>
                }
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="NextPage">Siguiente</button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private List<Empleado>? empleados;
    private List<Empleado>? filteredEmployees;
    private List<Empleado>? paginatedEmployees;
    private string? errorMessage;
    private List<string> departments = new();
    private string searchText = "";
    private string selectedDepartment = "";
    private string statusFilter = "all";
    private string sortColumn = "Id";
    private bool sortAscending = true;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            empleados = await Http.GetFromJsonAsync<List<Empleado>>("api/Empleados");
            departments = empleados?
                .Where(e => !string.IsNullOrEmpty(e.Departamento))
                .Select(e => e.Departamento!)
                .Distinct()
                .OrderBy(d => d)
                .ToList() ?? new List<string>();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar empleados: {ex.Message}";
        }
    }

    private void ApplyFilters()
    {
        if (empleados == null) return;

        filteredEmployees = empleados
            .Where(e => string.IsNullOrEmpty(searchText) || 
                       e.Nombre.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .Where(e => string.IsNullOrEmpty(selectedDepartment) || 
                       e.Departamento == selectedDepartment)
            .Where(e => statusFilter == "all" || 
                       (statusFilter == "active" && e.Activo) || 
                       (statusFilter == "inactive" && !e.Activo))
            .ToList();

        ApplySorting();
    }

    private void ApplySorting()
    {
        if (filteredEmployees == null) return;

        var propertyInfo = typeof(Empleado).GetProperty(sortColumn);
        if (propertyInfo != null)
        {
            filteredEmployees = sortAscending
                ? filteredEmployees.OrderBy(x => propertyInfo.GetValue(x, null)).ToList()
                : filteredEmployees.OrderByDescending(x => propertyInfo.GetValue(x, null)).ToList();
        }

        UpdatePagination();
    }

    private void UpdatePagination()
    {
        if (filteredEmployees == null) return;

        totalPages = (int)Math.Ceiling(filteredEmployees.Count / (double)pageSize);
        currentPage = Math.Clamp(currentPage, 1, totalPages);
        paginatedEmployees = filteredEmployees
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        ApplySorting();
    }

    private string SortIcon(string column)
    {
        if (sortColumn != column) return "";
        return sortAscending ? "↑" : "↓";
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePagination();
    }

    private void PreviousPage() => ChangePage(currentPage - 1);
    private void NextPage() => ChangePage(currentPage + 1);
}