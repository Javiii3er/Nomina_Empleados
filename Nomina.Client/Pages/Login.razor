@page "/login"
@using Nomina.Client.Services
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@inject AuthService Auth
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Iniciar sesión</PageTitle>

<div class="auth-container">
    <EditForm Model="@Model" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Usuario:</label>
            <InputText id="username" @bind-Value="Model.Username" class="form-control" />
            <ValidationMessage For="@(() => Model.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Contraseña:</label>
            <InputText id="password" type="password" @bind-Value="Model.Password" class="form-control" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>

        @if (ErrorMessage != null)
        {
            <div class="alert alert-danger">@ErrorMessage</div>
        }

        <button type="submit" class="btn btn-primary" disabled="@IsLoading">
            @(IsLoading ? "Cargando..." : "Ingresar")
        </button>
    </EditForm>
</div>

@code {
    private LoginModel Model { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private bool IsLoading { get; set; }

    private async Task HandleLogin()
    {
        IsLoading = true;
        ErrorMessage = null;

        var response = await Auth.Login(Model.Username, Model.Password);

        if (response.IsSuccessStatusCode)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var uri = new Uri(Nav.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);
            var returnUrl = query.TryGetValue("returnUrl", out var param) && !string.IsNullOrEmpty(param.First())
                ? param.First()
                : "/";

            if (user.IsInRole("Admin"))
                returnUrl = "/admin";
            else if (user.IsInRole("HR"))
                returnUrl = "/empleados";

            Nav.NavigateTo(returnUrl ?? "/", forceLoad: true);


        }
        else
        {
            ErrorMessage = "Credenciales incorrectas";
        }

        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
            Nav.NavigateTo("/", forceLoad: true);
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Usuario es requerido")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Contraseña es requerida")]
        public string Password { get; set; } = "";
    }
}